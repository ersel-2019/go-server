/*
 * Onboarding | GW system 2.0
 *
 * * All endpoint paths start with a version like `/v1`   * All versions must be maintained and functional forever or until decision is made to decommission a version * _`POST`_ and _`PUT`_ request **payloads are JSON** * Where possible HTTP request **status codes are used to describe the successfulness** of the requests, and content describes the details of the status <h1>Flow states</h1> <a href=\"https://viewer.diagrams.net/?highlight=0000ff&edit=_blank&layers=1&nav=1#G1cb9foqv8zgGVY0KWIQRTiE0-21ST3WUI\">Link to Diagram</a> 
 *
 * API version: 0.0.1
 * Contact: someone@ikea.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A PairingApiController binds http requests to an api service and writes the service results to the http response
type PairingApiController struct {
	service PairingApiServicer
}

// NewPairingApiController creates a default api controller
func NewPairingApiController(s PairingApiServicer) Router {
	return &PairingApiController{ service: s }
}

// Routes returns all of the api route for the PairingApiController
func (c *PairingApiController) Routes() Routes {
	return Routes{ 
		{
			"ConfirmPairing",
			strings.ToUpper("Put"),
			"/v1/pair-confirm/{pairingId}",
			c.ConfirmPairing,
		},
		{
			"DoublePhysicalButtonTap",
			strings.ToUpper("Post"),
			"/v1/double-button-tap",
			c.DoublePhysicalButtonTap,
		},
		{
			"GetGWStatus",
			strings.ToUpper("Get"),
			"/v1/gw-status",
			c.GetGWStatus,
		},
		{
			"InitPairing",
			strings.ToUpper("Post"),
			"/v1/pair-init",
			c.InitPairing,
		},
		{
			"SinglePhysicalButtonTap",
			strings.ToUpper("Post"),
			"/v1/single-button-tap",
			c.SinglePhysicalButtonTap,
		},
	}
}

// ConfirmPairing - Confirmes the ongoing pairing. The request will block until either the onboard GW button is pressed or the request times out (30s)
func (c *PairingApiController) ConfirmPairing(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	pairingId := params["pairingId"]
	result, err := c.service.ConfirmPairing(pairingId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DoublePhysicalButtonTap - Simulates pressing the physical button on the GW twice
func (c *PairingApiController) DoublePhysicalButtonTap(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.DoublePhysicalButtonTap()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetGWStatus - Returns the status of the GW
func (c *PairingApiController) GetGWStatus(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.GetGWStatus()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// InitPairing - Initiates the pairing flow.
func (c *PairingApiController) InitPairing(w http.ResponseWriter, r *http.Request) { 
	deviceInfo := &DeviceInfo{}
	if err := json.NewDecoder(r.Body).Decode(&deviceInfo); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.InitPairing(*deviceInfo)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// SinglePhysicalButtonTap - Simulates pressing the physical button on the GW once
func (c *PairingApiController) SinglePhysicalButtonTap(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.SinglePhysicalButtonTap()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
