openapi: 3.0.3
info:
  contact:
    email: someone@ikea.com
  description: |
    * All endpoint paths start with a version like `/v1`
      * All versions must be maintained and functional forever or until decision is made to decommission a version
    * _`POST`_ and _`PUT`_ request **payloads are JSON**
    * Where possible HTTP request **status codes are used to describe the successfulness** of the requests, and content describes the details of the status
    <h1>Flow states</h1> <a href="https://viewer.diagrams.net/?highlight=0000ff&edit=_blank&layers=1&nav=1#G1cb9foqv8zgGVY0KWIQRTiE0-21ST3WUI">Link to Diagram</a>
  title: Onboarding | GW system 2.0
  version: 0.0.1
servers:
- url: https://some.host.com/v1
- url: http://localhost:3000/v1
tags:
- description: Endpoints used during pairing
  name: pairing
paths:
  /gw-status:
    get:
      operationId: getGWStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GWStatus'
          description: The current status of the GW
      summary: Returns the status of the GW
      tags:
      - pairing
      x-eov-operation-handler: controllers/PairingController
  /single-button-tap:
    post:
      operationId: singlePhysicalButtonTap
      responses:
        "204":
          description: Physical button pressed on GW pressed once
      summary: Simulates pressing the physical button on the GW once
      tags:
      - pairing
      x-eov-operation-handler: controllers/PairingController
  /double-button-tap:
    post:
      operationId: doublePhysicalButtonTap
      responses:
        "204":
          description: Physical button pressed on GW pressed twice
      summary: Simulates pressing the physical button on the GW twice
      tags:
      - pairing
      x-eov-operation-handler: controllers/PairingController
  /pair-init:
    post:
      operationId: initPairing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceInfo'
        description: Client supplies a nickname and device info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairingInfo'
          description: Pairing information. Only works if GW is in state PAIRING,
            which requires the onboard button to be pressed.
        "403":
          description: Forbidden. GW is not in PAIRING mode. The physical GW button
            has to be pressed to put GW in PAIRING mode for 30 seconds.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairingInfo'
          description: Conflict. Pairing is already in progress by the specified device
      summary: Initiates the pairing flow.
      tags:
      - pairing
      x-eov-operation-handler: controllers/PairingController
  /pair-confirm/{pairingId}:
    put:
      operationId: confirmPairing
      parameters:
      - description: Identifier for the active pairing
        explode: false
        in: path
        name: pairingId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessInfo'
          description: Pairing completed. Returned if the pairing id matches the active
            pairing id of the GW, and if the physical button of the GW is pressed
            within 30 seconds.
        "403":
          description: Forbidden. GW is not in PAIRING mode or supplied information
            doesn't match active pairing info in GW.
      summary: Confirmes the ongoing pairing. The request will block until either
        the onboard GW button is pressed or the request times out (30s)
      tags:
      - pairing
      x-eov-operation-handler: controllers/PairingController
components:
  schemas:
    PairingInfo:
      example:
        pairingId: pairingId
      properties:
        pairingId:
          type: string
      type: object
    AccessInfo:
      example:
        accessToken: accessToken
      properties:
        accessToken:
          type: string
      type: object
    DeviceInfo:
      example:
        osVersion: osVersion
        vendor: vendor
        nickname: nickname
        ipAddress: ipAddress
        model: model
      properties:
        nickname:
          type: string
        vendor:
          type: string
        model:
          type: string
        osVersion:
          type: string
        ipAddress:
          type: string
      required:
      - nickname
      type: object
    GWStatus:
      example:
        activePairing:
          pairingId: pairingId
          deviceInfo:
            osVersion: osVersion
            vendor: vendor
            nickname: nickname
            ipAddress: ipAddress
            model: model
        lastDoubleButtonTap: lastDoubleButtonTap
        state: state
        lastSingleButtonTap: lastSingleButtonTap
        pairedDevices:
        - osVersion: osVersion
          vendor: vendor
          nickname: nickname
          ipAddress: ipAddress
          model: model
        - osVersion: osVersion
          vendor: vendor
          nickname: nickname
          ipAddress: ipAddress
          model: model
      properties:
        state:
          type: string
        lastSingleButtonTap:
          type: string
        lastDoubleButtonTap:
          type: string
        activePairing:
          $ref: '#/components/schemas/ActivePairing'
        pairedDevices:
          items:
            $ref: '#/components/schemas/DeviceInfo'
          type: array
      type: object
    ActivePairing:
      example:
        pairingId: pairingId
        deviceInfo:
          osVersion: osVersion
          vendor: vendor
          nickname: nickname
          ipAddress: ipAddress
          model: model
      properties:
        pairingId:
          type: string
        deviceInfo:
          $ref: '#/components/schemas/DeviceInfo'
      type: object
